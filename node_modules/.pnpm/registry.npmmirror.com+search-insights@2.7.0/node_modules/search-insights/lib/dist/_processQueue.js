"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.processQueue = void 0;
/**
 * Processes queue that might have been set before
 * the script was actually loaded and reassigns
 * class over globalObject variable to execute commands
 * instead of putting them to the queue
 */
var _getFunctionalInterface_1 = require("./_getFunctionalInterface");
function processQueue(globalObject) {
    // Set pointer which allows renaming of the script
    var pointer = globalObject["AlgoliaAnalyticsObject"];
    if (pointer) {
        var _aa_1 = _getFunctionalInterface_1.getFunctionalInterface(this);
        // `aa` is the user facing function, which is defined in the install snippet.
        //  - before library is initialized  `aa` fills a queue
        //  - after library is initialized  `aa` calls `_aa`
        var aa = globalObject[pointer];
        aa.queue = aa.queue || [];
        var queue = aa.queue;
        // Loop queue and execute functions in the queue
        queue.forEach(function (args) {
            var _a = [].slice.call(args), functionName = _a[0], functionArguments = _a.slice(1);
            _aa_1.apply(void 0, __spreadArrays([functionName], functionArguments));
        });
        // FIXME: Reassigning the pointer is a bad idea (cf: https://github.com/algolia/search-insights.js/issues/127)
        //   to remove this without any breaking change, we redefine the Array.prototype.push method on the queue array.
        //   for next major version, use a custom method instead of push.
        // @ts-ignore (otherwise typescript won't let you change the signature)
        queue.push = function (args) {
            var _a = [].slice.call(args), functionName = _a[0], functionArguments = _a.slice(1);
            _aa_1.apply(void 0, __spreadArrays([functionName], functionArguments));
        };
    }
}
exports.processQueue = processQueue;
