"use strict";
exports.__esModule = true;
exports.onUserTokenChange = exports.getUserToken = exports.setUserToken = exports.setAnonymousUserToken = exports.getCookie = exports.MONTH = void 0;
var uuid_1 = require("./utils/uuid");
var utils_1 = require("./utils");
var COOKIE_KEY = "_ALGOLIA";
exports.MONTH = 30 * 24 * 60 * 60 * 1000;
var setCookie = function (name, value, duration) {
    var d = new Date();
    d.setTime(d.getTime() + duration);
    var expires = "expires=" + d.toUTCString();
    document.cookie = name + "=" + value + ";" + expires + ";path=/";
};
exports.getCookie = function (name) {
    var prefix = name + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === " ") {
            c = c.substring(1);
        }
        if (c.indexOf(prefix) === 0) {
            return c.substring(prefix.length, c.length);
        }
    }
    return "";
};
function setAnonymousUserToken(inMemory) {
    if (inMemory === void 0) { inMemory = false; }
    if (inMemory) {
        this.setUserToken("anonymous-" + uuid_1.createUUID());
        return;
    }
    if (!utils_1.supportsCookies()) {
        return;
    }
    var foundToken = exports.getCookie(COOKIE_KEY);
    if (!foundToken ||
        foundToken === "" ||
        foundToken.indexOf("anonymous-") !== 0) {
        var savedUserToken = this.setUserToken("anonymous-" + uuid_1.createUUID());
        setCookie(COOKIE_KEY, savedUserToken, this._cookieDuration);
    }
    else {
        this.setUserToken(foundToken);
    }
}
exports.setAnonymousUserToken = setAnonymousUserToken;
function setUserToken(userToken) {
    this._userToken = userToken;
    if (utils_1.isFunction(this._onUserTokenChangeCallback)) {
        this._onUserTokenChangeCallback(this._userToken);
    }
    return this._userToken;
}
exports.setUserToken = setUserToken;
function getUserToken(options, callback) {
    if (utils_1.isFunction(callback)) {
        callback(null, this._userToken);
    }
    return this._userToken;
}
exports.getUserToken = getUserToken;
function onUserTokenChange(callback, options) {
    this._onUserTokenChangeCallback = callback;
    if (options &&
        options.immediate &&
        utils_1.isFunction(this._onUserTokenChangeCallback)) {
        this._onUserTokenChangeCallback(this._userToken);
    }
}
exports.onUserTokenChange = onUserTokenChange;
