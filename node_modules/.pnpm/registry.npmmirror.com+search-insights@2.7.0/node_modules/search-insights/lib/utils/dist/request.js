"use strict";
exports.__esModule = true;
exports.requestWithNodeHttpModule = exports.requestWithXMLHttpRequest = exports.requestWithSendBeacon = void 0;
exports.requestWithSendBeacon = function (url, data) {
    var serializedData = JSON.stringify(data);
    var beacon = navigator.sendBeacon(url, serializedData);
    return Promise.resolve(beacon ? true : exports.requestWithXMLHttpRequest(url, data));
};
exports.requestWithXMLHttpRequest = function (url, data) {
    return new Promise(function (resolve, reject) {
        var serializedData = JSON.stringify(data);
        var req = new XMLHttpRequest();
        req.addEventListener("readystatechange", function () {
            if (req.readyState === 4 && req.status === 200) {
                resolve(true);
            }
            else if (req.readyState === 4) {
                resolve(false);
            }
        });
        req.addEventListener("error", function () { return reject(); });
        req.addEventListener("timeout", function () { return resolve(false); });
        req.open("POST", url);
        req.setRequestHeader("Content-Type", "application/json");
        req.setRequestHeader("Content-Length", "" + serializedData.length);
        req.send(serializedData);
    });
};
exports.requestWithNodeHttpModule = function (url, data) {
    return new Promise(function (resolve, reject) {
        var serializedData = JSON.stringify(data);
        var _a = require("url").parse(url), protocol = _a.protocol, host = _a.host, path = _a.path;
        var options = {
            protocol: protocol,
            host: host,
            path: path,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Content-Length": serializedData.length
            }
        };
        var request = (url.startsWith("https://")
            ? require("https")
            : require("http")).request;
        var req = request(options, function (_a) {
            var statusCode = _a.statusCode;
            if (statusCode === 200) {
                resolve(true);
            }
            else {
                resolve(false);
            }
        });
        req.on("error", function (error) {
            console.error(error);
            reject(error);
        });
        req.on("timeout", function () { return resolve(false); });
        req.write(serializedData);
        req.end();
    });
};
