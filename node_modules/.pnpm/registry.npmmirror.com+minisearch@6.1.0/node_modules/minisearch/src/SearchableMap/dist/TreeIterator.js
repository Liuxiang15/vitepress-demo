"use strict";
exports.__esModule = true;
exports.LEAF = exports.VALUES = exports.KEYS = exports.ENTRIES = exports.TreeIterator = void 0;
/** @ignore */
var ENTRIES = 'ENTRIES';
exports.ENTRIES = ENTRIES;
/** @ignore */
var KEYS = 'KEYS';
exports.KEYS = KEYS;
/** @ignore */
var VALUES = 'VALUES';
exports.VALUES = VALUES;
/** @ignore */
var LEAF = '';
exports.LEAF = LEAF;
/**
 * @private
 */
var TreeIterator = /** @class */ (function () {
    function TreeIterator(set, type) {
        var node = set._tree;
        var keys = Array.from(node.keys());
        this.set = set;
        this._type = type;
        this._path = keys.length > 0 ? [{ node: node, keys: keys }] : [];
    }
    TreeIterator.prototype.next = function () {
        var value = this.dive();
        this.backtrack();
        return value;
    };
    TreeIterator.prototype.dive = function () {
        if (this._path.length === 0) {
            return { done: true, value: undefined };
        }
        var _a = last(this._path), node = _a.node, keys = _a.keys;
        if (last(keys) === LEAF) {
            return { done: false, value: this.result() };
        }
        var child = node.get(last(keys));
        this._path.push({ node: child, keys: Array.from(child.keys()) });
        return this.dive();
    };
    TreeIterator.prototype.backtrack = function () {
        if (this._path.length === 0) {
            return;
        }
        var keys = last(this._path).keys;
        keys.pop();
        if (keys.length > 0) {
            return;
        }
        this._path.pop();
        this.backtrack();
    };
    TreeIterator.prototype.key = function () {
        return this.set._prefix + this._path
            .map(function (_a) {
            var keys = _a.keys;
            return last(keys);
        })
            .filter(function (key) { return key !== LEAF; })
            .join('');
    };
    TreeIterator.prototype.value = function () {
        return last(this._path).node.get(LEAF);
    };
    TreeIterator.prototype.result = function () {
        switch (this._type) {
            case VALUES: return this.value();
            case KEYS: return this.key();
            default: return [this.key(), this.value()];
        }
    };
    TreeIterator.prototype[Symbol.iterator] = function () {
        return this;
    };
    return TreeIterator;
}());
exports.TreeIterator = TreeIterator;
var last = function (array) {
    return array[array.length - 1];
};
