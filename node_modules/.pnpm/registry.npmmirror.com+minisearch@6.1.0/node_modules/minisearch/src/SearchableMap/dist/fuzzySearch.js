"use strict";
exports.__esModule = true;
exports.fuzzySearch = void 0;
/* eslint-disable no-labels */
var TreeIterator_1 = require("./TreeIterator");
/**
 * @ignore
 */
exports.fuzzySearch = function (node, query, maxDistance) {
    var results = new Map();
    if (query === undefined)
        return results;
    // Number of columns in the Levenshtein matrix.
    var n = query.length + 1;
    // Matching terms can never be longer than N + maxDistance.
    var m = n + maxDistance;
    // Fill first matrix row and column with numbers: 0 1 2 3 ...
    var matrix = new Uint8Array(m * n).fill(maxDistance + 1);
    for (var j = 0; j < n; ++j)
        matrix[j] = j;
    for (var i = 1; i < m; ++i)
        matrix[i * n] = i;
    recurse(node, query, maxDistance, results, matrix, 1, n, '');
    return results;
};
// Modified version of http://stevehanov.ca/blog/?id=114
// This builds a Levenshtein matrix for a given query and continuously updates
// it for nodes in the radix tree that fall within the given maximum edit
// distance. Keeping the same matrix around is beneficial especially for larger
// edit distances.
//
//           k   a   t   e   <-- query
//       0   1   2   3   4
//   c   1   1   2   3   4
//   a   2   2   1   2   3
//   t   3   3   2   1  [2]  <-- edit distance
//   ^
//   ^ term in radix tree, rows are added and removed as needed
var recurse = function (node, query, maxDistance, results, matrix, m, n, prefix) {
    var offset = m * n;
    key: for (var _i = 0, _a = node.keys(); _i < _a.length; _i++) {
        var key = _a[_i];
        if (key === TreeIterator_1.LEAF) {
            // We've reached a leaf node. Check if the edit distance acceptable and
            // store the result if it is.
            var distance = matrix[offset - 1];
            if (distance <= maxDistance) {
                results.set(prefix, [node.get(key), distance]);
            }
        }
        else {
            // Iterate over all characters in the key. Update the Levenshtein matrix
            // and check if the minimum distance in the last row is still within the
            // maximum edit distance. If it is, we can recurse over all child nodes.
            var i = m;
            for (var pos = 0; pos < key.length; ++pos, ++i) {
                var char = key[pos];
                var thisRowOffset = n * i;
                var prevRowOffset = thisRowOffset - n;
                // Set the first column based on the previous row, and initialize the
                // minimum distance in the current row.
                var minDistance = matrix[thisRowOffset];
                var jmin = Math.max(0, i - maxDistance - 1);
                var jmax = Math.min(n - 1, i + maxDistance);
                // Iterate over remaining columns (characters in the query).
                for (var j = jmin; j < jmax; ++j) {
                    var different = char !== query[j];
                    // It might make sense to only read the matrix positions used for
                    // deletion/insertion if the characters are different. But we want to
                    // avoid conditional reads for performance reasons.
                    var rpl = matrix[prevRowOffset + j] + +different;
                    var del = matrix[prevRowOffset + j + 1] + 1;
                    var ins = matrix[thisRowOffset + j] + 1;
                    var dist = matrix[thisRowOffset + j + 1] = Math.min(rpl, del, ins);
                    if (dist < minDistance)
                        minDistance = dist;
                }
                // Because distance will never decrease, we can stop. There will be no
                // matching child nodes.
                if (minDistance > maxDistance) {
                    continue key;
                }
            }
            recurse(node.get(key), query, maxDistance, results, matrix, i, n, prefix + key);
        }
    }
};
exports["default"] = exports.fuzzySearch;
